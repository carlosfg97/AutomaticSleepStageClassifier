{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Classifiers","provenance":[],"collapsed_sections":["yTQ-u9WojPZx"],"machine_shape":"hm","authorship_tag":"ABX9TyPHOxzAxoAY4Kheh5tXFwur"},"kernelspec":{"name":"python3","display_name":"Python 3"},"accelerator":"GPU"},"cells":[{"cell_type":"markdown","metadata":{"id":"w6-3z3qqchjT"},"source":["# Automatic sleep stage classification with CNN and LSTM   \n","\n","\n","## Classifiers \n","\n","This is the second of 3 notebooks for Automatic sleep stage classification with CNN and LSTM.\n","\n","The general purpose of the 3 notebooks is to extract data from Sleep EDF database and perform sleep classification with CNN and LSTM techniques. \n","\n","Some parts of the work have been adapted from the paper published by Supratak et al. and its corresponding code available at (https://github.com/akaraspt/deepsleepnet).\n","\n","For best reproducibility effects, I recommend to run all code in a Google Colab environment with an active GPU hardware accelerator.\n","\n","This second notebook has the next sections:\n","* I. Libraries and data load\n","* II. CNN Concat\n","* III. CNN + LSTM\n","* IV. Hypnogram comparison\n","\n"]},{"cell_type":"markdown","metadata":{"id":"yTQ-u9WojPZx"},"source":["# Libraries and data load\n","\n","Libraries and functions that will be needed. Loading of the NPZ files generated in the first notebook."]},{"cell_type":"code","metadata":{"id":"-LHrYNXcjP7F","executionInfo":{"status":"ok","timestamp":1604891099111,"user_tz":300,"elapsed":2066,"user":{"displayName":"Carlos Fabbri Garcia","photoUrl":"","userId":"14351255903339752641"}}},"source":["# Libraries\n","\n","import numpy as np\n","import matplotlib.pyplot as plt\n","%matplotlib inline\n","\n","import time\n","from datetime import datetime as dt\n","import pandas as pd\n","import os\n","import seaborn as sns\n","\n","from sklearn.metrics import accuracy_score\n","from sklearn.metrics import confusion_matrix\n","from sklearn.metrics import classification_report\n","from sklearn.model_selection import StratifiedKFold\n","\n","from sklearn.preprocessing import Normalizer\n","\n","\n","\n","\n","#Functions\n","\n","def print_confusion_matrix(confusion_matrix, class_names, figsize = (10,7), fontsize=14):\n","\n","    df_cm = pd.DataFrame(\n","        confusion_matrix, index=class_names, columns=class_names, \n","    )\n","    fig = plt.figure(figsize=figsize)\n","    try:\n","        heatmap = sns.heatmap(df_cm, annot=True, fmt=\"d\")\n","    except ValueError:\n","        raise ValueError(\"Confusion matrix values must be integers.\")\n","    heatmap.yaxis.set_ticklabels(heatmap.yaxis.get_ticklabels(), rotation=0, ha='right', fontsize=fontsize)\n","    heatmap.xaxis.set_ticklabels(heatmap.xaxis.get_ticklabels(), rotation=45, ha='right', fontsize=fontsize)\n","    plt.ylabel('True label')\n","    plt.xlabel('Predicted label')\n","    return fig\n","\n","def _load_npz_file(npz_file):\n","    \"\"\"Load data and labels from a npz file.\"\"\"\n","    with np.load(npz_file) as f:\n","        data = f[\"x\"]\n","        labels = f[\"y\"]\n","        sampling_rate = f[\"fs\"]\n","    return data, labels, sampling_rate\n","\n","def _load_npz_list_files(npz_files):\n","    \"\"\"Load data and labels from list of npz files.\"\"\"\n","    data = []\n","    labels = []\n","    fs = None\n","    for npz_f in npz_files:\n","        tmp_data, tmp_labels, sampling_rate = _load_npz_file(npz_f)\n","        if fs is None:\n","            fs = sampling_rate\n","        elif fs != sampling_rate:\n","            raise Exception(\"Found mismatch in sampling rate.\")\n","        data.append(tmp_data)\n","        labels.append(tmp_labels)\n","    data = np.vstack(data)\n","    labels = np.hstack(labels)\n","    return data, labels\n","\n","\n","\n"],"execution_count":1,"outputs":[]},{"cell_type":"code","metadata":{"id":"M-SZN7uwrbOH","executionInfo":{"status":"ok","timestamp":1604891279687,"user_tz":300,"elapsed":172529,"user":{"displayName":"Carlos Fabbri Garcia","photoUrl":"","userId":"14351255903339752641"}},"outputId":"6d091df8-4762-4945-9ddd-061ab20eb850","colab":{"base_uri":"https://localhost:8080/"}},"source":["# Also, mount google drive again to be able to read the files\n","\n","from google.colab import drive\n","drive.mount('/content/gdrive')\n","\n"],"execution_count":2,"outputs":[{"output_type":"stream","text":["Mounted at /content/gdrive\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"jQ44EeXBsTrz"},"source":["## Tensorflow version"]},{"cell_type":"code","metadata":{"id":"rwnYSPv22zPZ","executionInfo":{"status":"ok","timestamp":1604891307312,"user_tz":300,"elapsed":8220,"user":{"displayName":"Carlos Fabbri Garcia","photoUrl":"","userId":"14351255903339752641"}},"outputId":"587cdd96-681a-4f22-c2aa-a81d514c7759","colab":{"base_uri":"https://localhost:8080/"}},"source":["import tensorflow as tf\n","from tensorflow import keras\n","from tensorflow.keras import layers\n","from keras.regularizers import l2\n","%tensorflow_version 2.x\n","\n","# Make sure to have the GPU active!\n","\n","print(tf.__version__)\n","\n","print(\"Num GPUs Available: \", len(tf.config.experimental.list_physical_devices('GPU')))\n","\n","device_name = tf.test.gpu_device_name()\n","if device_name != '/device:GPU:0':\n","  raise SystemError('GPU device not found')\n","print('Found GPU at: {}'.format(device_name))\n"],"execution_count":3,"outputs":[{"output_type":"stream","text":["2.3.0\n","Num GPUs Available:  1\n","Found GPU at: /device:GPU:0\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"bZImMkEuz6gR"},"source":["## Reading of recordings"]},{"cell_type":"code","metadata":{"id":"Re-Zbq1jd6lP","executionInfo":{"status":"ok","timestamp":1604891720511,"user_tz":300,"elapsed":32199,"user":{"displayName":"Carlos Fabbri Garcia","photoUrl":"","userId":"14351255903339752641"}},"outputId":"4c9bc531-de7f-4df6-f731-1c66217ccf4a","colab":{"base_uri":"https://localhost:8080/"}},"source":["# Load npz files\n","\n","# Change variable 'path' with own path\n","\n","path = '/content/gdrive/My Drive/Automatic_sleep_classification/data' #the path where the npz files were saved in the first notebook.\n","\n","#path = '/content/gdrive/My Drive/Tesis/Código/Data_nuevodp'\n","\n","files = os.listdir(path) \n","filespath = []\n","for i in files:\n","  filespath.append(os.path.join(path,i))\n","\n","X, Y = _load_npz_list_files(filespath) \n","\n","X = X.reshape((X.shape[0], X.shape[1], 1))\n","print(X.shape, Y.shape)\n"],"execution_count":7,"outputs":[{"output_type":"stream","text":["(42308, 3000, 1) (42308,)\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"qk6zZFItXGNr"},"source":["# CNN Concat\n","\n","The first network architecture to test in the dataset is a CNN with two parallel legs, inspired from the proposals in Supratak et al. (2017) and Chambon et al. (2018)\n","\n","Please refer to the diagram below to review the details of the network. More explanation is provided in the paper. \n","\n","<img src='https://drive.google.com/uc?export=view&id=1Q6nufNIOscq_8iThXfeIdn5n2lFksjg8' alt=\"drawing\" width=\"350\"/>"]},{"cell_type":"code","metadata":{"id":"0NdH5WV6FMy-","executionInfo":{"status":"ok","timestamp":1604893464696,"user_tz":300,"elapsed":373437,"user":{"displayName":"Carlos Fabbri Garcia","photoUrl":"","userId":"14351255903339752641"}},"outputId":"e0cdae09-5409-48bb-f29d-8b285ffde660","colab":{"base_uri":"https://localhost:8080/"}},"source":["\n","n_split=10 \n","\n","skf = StratifiedKFold(n_splits=n_split, random_state=47)\n","\n","cv_results = []\n","k = 0\n","for train_index,test_index in skf.split(X, Y):\n","  begin_time_loop = dt.now()\n","\n","  \n","  X_train,X_test=X[train_index],X[test_index]\n","  y_train,y_test=Y[train_index],Y[test_index]\n","\n","  k = k+1\n","  a = np.zeros((3000, 1))\n","\n","  X_train = np.insert(X_train, 0, a, axis=0)\n","  X_train = np.insert(X_train, 0, a, axis=0)\n","  X_train = np.insert(X_train, -1, a, axis=0)\n","  X_train = np.insert(X_train, -1, a, axis=0)\n","  X_test = np.insert(X_test, 0, a, axis=0)\n","  X_test = np.insert(X_test, 0, a, axis=0)\n","  X_test = np.insert(X_test, -1, a, axis=0)\n","  X_test = np.insert(X_test, -1, a, axis=0)\n","\n","  X_train2 = []\n","  for i in range(len(X_train)-4):\n","    j = i + 2\n","    clip = np.array([X_train[j-2], X_train[j-1], X_train[j], X_train[j+1], X_train[j+2]]).reshape((15000,1))\n","    X_train2.append(clip)\n","\n","  X_test2 = []\n","  for i in range(len(X_test)-4):\n","    j = i + 2\n","    clip = np.array([X_test[j-2], X_test[j-1], X_test[j], X_test[j+1], X_test[j+2]]).reshape((15000,1))\n","    X_test2.append(clip)\n","\n","  X_train_2=np.array(X_train2)\n","  X_test_2=np.array(X_test2)\n","\n","  inputs = keras.Input(shape=(15000,1))\n","\n","  #left leg - short filters\n","\n","  x = layers.Conv1D( filters=64, kernel_size=50, strides=6 , \n","                    name = 'conv1')(inputs)\n","  x = layers.BatchNormalization()(x) \n","  x = layers.ReLU()(x)\n","\n","  x = layers.MaxPool1D(pool_size=8, strides=8, name='max1')(x)\n","\n","  x = layers.Dropout(rate=0.5  , name ='dropout1' )(x)\n","\n","  x = layers.Conv1D(filters=128, kernel_size=8, strides=1, \n","                    name = 'conv2', padding = 'same' )(x)\n","  x = layers.BatchNormalization()(x)\n","  x = layers.ReLU()(x)\n","\n","  x = layers.Conv1D(filters=128, kernel_size=8, strides=1, \n","                    name = 'conv3', padding = 'same' )(x)\n","  x = layers.BatchNormalization()(x)\n","  x = layers.ReLU()(x)\n","\n","  x = layers.Conv1D(filters=128, kernel_size=8, strides=1, \n","                    name = 'conv4', padding = 'same')(x)\n","  x = layers.BatchNormalization()(x)\n","  x = layers.ReLU()(x)\n","\n","  x = layers.MaxPool1D(pool_size=4, strides=4, name = 'max2')(x)\n","  x = layers.Flatten()(x)\n","\n","  #right leg - longer filters\n","  x2 = layers.Conv1D( filters=64, kernel_size=400, strides=50 , \n","                    name = 'conv1_2')(inputs)\n","  x2 = layers.BatchNormalization()(x2)\n","  x2 = layers.ReLU()(x2)\n","\n","  x2 = layers.MaxPool1D(pool_size=4, strides=4, name='max1_2')(x2)\n","\n","  x2 = layers.Dropout(rate=0.5  , name ='dropout1_2' )(x2)\n","\n","  x2 = layers.Conv1D(filters=128, kernel_size=6, strides=1, \n","                    name = 'conv2_2', padding='same' )(x2)\n","  x2 = layers.BatchNormalization()(x2)\n","  x2 = layers.ReLU()(x2)\n","\n","  x2 = layers.Conv1D(filters=128, kernel_size=6, strides=1, \n","                    name = 'conv3_2', padding='same' )(x2)\n","  x2 = layers.BatchNormalization()(x2)\n","  x2 = layers.ReLU()(x2)\n","\n","  x2 = layers.Conv1D(filters=128, kernel_size=6, strides=1, \n","                    name = 'conv4_2', padding='same' )(x2)\n","  x2 = layers.BatchNormalization()(x2)\n","  x2 = layers.ReLU()(x2)\n","\n","  x2 = layers.MaxPool1D(pool_size=2, strides=2, name = 'max2_2')(x2)\n","\n","  x2 = layers.Flatten()(x2)\n","  #concatenate both legs\n","  concat = layers.Concatenate(name = 'concat')([x, x2])\n","\n","  #final layer as softmax\n","  outputs = layers.Dense(5, activation=tf.nn.softmax, name = 'soft') (concat)\n","\n","  model = keras.Model(inputs=inputs, outputs=outputs, name='sleep')\n","\n","  #compile and define Adam optimizer\n","  model.compile(loss=keras.losses.SparseCategoricalCrossentropy(),\n","              optimizer=keras.optimizers.Adam(learning_rate=0.001),\n","              metrics=['accuracy'])\n","\n","  history = model.fit(X_train_2, y_train,\n","                    batch_size=100,\n","                    epochs=6, verbose= 0) \n","  \n","  y_prob = model.predict(X_test_2)\n","\n","  y_pred = y_prob.argmax(axis=-1)\n","  \n","  k_acc = accuracy_score(y_test,y_pred)\n","  print(k_acc)\n","\n","  elapsed = dt.now() - begin_time_loop  \n","  print('Fold {} took {}'.format(str(k), str(elapsed)))\n","  \n","  fold_result = {'fold': k, 'time': elapsed,'y_test': y_test, 'y_pred': y_pred, 'y_prob': y_prob,\n","               'history': history.history, 'accuracy': k_acc }\n","    \n","      \n","  cv_results.append(fold_result)\n"],"execution_count":13,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/sklearn/model_selection/_split.py:296: FutureWarning: Setting a random_state has no effect since shuffle is False. This will raise an error in 0.24. You should leave random_state to its default (None), or set shuffle=True.\n","  FutureWarning\n"],"name":"stderr"},{"output_type":"stream","text":["0.883124556842354\n","0.7920113448357362\n","0.8382179153864334\n","0.7883228932750266\n","0.8405625812551708\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"gXuMkmRsYxfX","executionInfo":{"status":"ok","timestamp":1604893688453,"user_tz":300,"elapsed":1469,"user":{"displayName":"Carlos Fabbri Garcia","photoUrl":"","userId":"14351255903339752641"}},"outputId":"8dbb51dc-5d23-4864-b4f4-1bc65d0d3662","colab":{"base_uri":"https://localhost:8080/"}},"source":["# save results for further analysis when required\n","\n","import pickle\n","\n","path = '/content/gdrive/My Drive/Automatic_sleep_classification/results/cnnconcat.pkl'\n","\n","with open(path, 'wb') as f:\n","    pickle.dump(cv_results, f)\n","\n","# unravel y_pred and y_test into unique vectors for classification report\n","y_pred=[]\n","y_test=[]\n","for i in cv_results:\n","  y_pred.extend(i['y_pred'])\n","  y_test.extend(i['y_test'])\n","\n","\n","print(classification_report(y_test,y_pred, digits=4) )\n","\n"],"execution_count":16,"outputs":[{"output_type":"stream","text":["              precision    recall  f1-score   support\n","\n","           0     0.8619    0.9066    0.8837      8285\n","           1     0.4951    0.3231    0.3910      2804\n","           2     0.8994    0.8247    0.8605     17799\n","           3     0.8835    0.8736    0.8785      5703\n","           4     0.7111    0.9035    0.7958      7717\n","\n","    accuracy                         0.8284     42308\n","   macro avg     0.7702    0.7663    0.7619     42308\n","weighted avg     0.8288    0.8284    0.8245     42308\n","\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"AGzORKhN9GkH","executionInfo":{"status":"ok","timestamp":1604893693493,"user_tz":300,"elapsed":1182,"user":{"displayName":"Carlos Fabbri Garcia","photoUrl":"","userId":"14351255903339752641"}},"outputId":"89064258-0080-42aa-ae78-706eaf4a0c94","colab":{"base_uri":"https://localhost:8080/","height":495}},"source":["# print confusion matrix\n","\n","C = confusion_matrix( y_test ,y_pred)\n","cn = np.transpose( np.transpose(C) / C.astype(np.float).sum(axis=1) )\n","cn = np.round(cn, 2)\n","\n","df_cm = pd.DataFrame(\n","    cn, index=['0-W','1-N1','2-N2','3-N3','4-REM'], columns=['0-W','1-N1','2-N2','3-N3','4-REM'])\n","fig = plt.figure(figsize=(8,7))\n","try:\n","    heatmap = sns.heatmap(df_cm, annot=True, cmap = \"Blues\", annot_kws={\"size\": 14})\n","except ValueError:\n","    raise ValueError(\"Confusion matrix values must be integers.\")\n","heatmap.yaxis.set_ticklabels(heatmap.yaxis.get_ticklabels(), rotation=0, ha='right', fontsize=14)\n","heatmap.xaxis.set_ticklabels(heatmap.xaxis.get_ticklabels(), rotation=45, ha='right', fontsize=14)\n","plt.ylabel('True labels', fontsize = 14)\n","plt.xlabel('Predicted labels',  fontsize=14)\n","\n"],"execution_count":17,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Text(0.5, 42.0, 'Predicted labels')"]},"metadata":{"tags":[]},"execution_count":17},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 576x504 with 2 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"NTWSs4AvTY-e"},"source":["# CNN + LSTM\n","\n","The second network architecture to test in the dataset is an ensemble of CNN and LSTM, with rearrengement of feature vectors before the LSTM component, inspired from the proposed one in Supratak et al. (2017).\n","\n","Please refer to the diagram below to review the details of the network. More explanation is provided in the papers. \n","\n","<img src='https://drive.google.com/uc?export=view&id=1LRjjSOkMmudf-V8I_o_GjnOrZ59aW-yK' alt=\"drawing\" width=\"300\"/>\n","\n","\n"]},{"cell_type":"code","metadata":{"id":"vnYIO4LF_1rw","executionInfo":{"status":"ok","timestamp":1604894425639,"user_tz":300,"elapsed":755,"user":{"displayName":"Carlos Fabbri Garcia","photoUrl":"","userId":"14351255903339752641"}}},"source":["# We define the CNN architecture again\n","\n","from tensorflow.keras.layers import Bidirectional #we will be needing this layer\n","\n","  \n","\n","# We define the LSTM architecture\n","\n","#LSTM\n","\n","def lstm_builder():\n","\n","  inputs = keras.Input(shape=(5,2688))\n","\n","  x = layers.Dropout(rate=0.5  , name ='lstm_dropout1' )(inputs)\n","\n","  x1 = Bidirectional(layers.LSTM(512, return_sequences=True)) (x)\n","  x1 = layers.Dropout(rate=0.5  , name ='lstm_dropout2' )(x1)\n","\n","  x1 = Bidirectional(layers.LSTM(512)) (x1)\n","  x1 = layers.Dropout(rate=0.5  , name ='lstm_dropout3' )(x1)\n","\n","  x2 = layers.Dense(1024)(x)\n","  x2 = layers.BatchNormalization()(x2)\n","  x2 = layers.ReLU(name = 'lstm_residual1')(x2)\n","\n","  addition = layers.Add(name = 'lstm_concat1')([x1, x2])\n","\n","\n","  x3 = layers.BatchNormalization()(addition)\n","  x3 = layers.ReLU(name = 'lstm_residual2')(x3)\n","\n","  x3 = layers.Dropout(rate=0.5  , name ='lstm_dropout4' )(addition)\n","\n","  x3 = layers.Flatten()(x3)\n","\n","  outputs = layers.Dense(5, activation=tf.nn.softmax, name = 'lstm_soft') (x3)\n","\n","  lstm = keras.Model(inputs=inputs, outputs=outputs, name='lstmsleep')\n","\n","  lstm.compile(loss=keras.losses.SparseCategoricalCrossentropy(),\n","                optimizer=keras.optimizers.Adam(learning_rate=0.001),\n","                metrics=['accuracy'])\n","  \n","  return lstm\n"],"execution_count":20,"outputs":[]},{"cell_type":"code","metadata":{"id":"AmXtjMwMBLKr","executionInfo":{"status":"error","timestamp":1600643240728,"user_tz":300,"elapsed":1094,"user":{"displayName":"Carlos Fabbri Garcia","photoUrl":"","userId":"14351255903339752641"}},"outputId":"09577e3c-f169-45c3-aeb8-7cbdc4275f87","colab":{"base_uri":"https://localhost:8080/","height":232}},"source":["# perform training and prediction for 20 stratified folds\n","\n","\n","skf = StratifiedKFold(n_splits=10)\n","\n","cv_results = []\n","k = 0\n","for train_index,test_index in skf.split(X, Y):\n","  begin_time_loop = dt.now()\n","\n","  k = k+1\n","  X_train,X_test=X[train_index],X[test_index]\n","  y_train,y_test=Y[train_index],Y[test_index]\n","\n","\n","  cnn = cnn_builder() \n","\n","\n","  history1 = cnn.fit(X_train, y_train,\n","                    batch_size=100,\n","                    epochs=19, verbose=0)\n","\n","\n","  #get feature vectors from the activations of the layer before the softmax\n","  layer_name = 'concat'\n","  intermediate_layer_model = keras.Model(inputs=cnn.input,\n","                                  outputs=cnn.get_layer(layer_name).output)\n","  intermediate_output_train = intermediate_layer_model.predict(X_train)\n","  intermediate_output_test = intermediate_layer_model.predict(X_test)\n","\n","\n","  # create new train and test sets from the extracted feature vectors\n","  X_train_lstm = intermediate_output_train\n","  X_test_lstm = intermediate_output_test\n","\n","  a = np.zeros((1, 2688))\n","\n","  # pad the sets\n","  X_train_lstm = np.insert(X_train_lstm, 0, a, axis=0)\n","  X_train_lstm = np.insert(X_train_lstm, 0, a, axis=0)\n","  X_train_lstm = np.insert(X_train_lstm, -1, a, axis=0)\n","  X_train_lstm = np.insert(X_train_lstm, -1, a, axis=0)\n","\n","  X_test_lstm = np.insert(X_test_lstm, 0, a, axis=0)\n","  X_test_lstm = np.insert(X_test_lstm, 0, a, axis=0)\n","  X_test_lstm = np.insert(X_test_lstm, -1, a, axis=0)\n","  X_test_lstm = np.insert(X_test_lstm, -1, a, axis=0)\n","\n","  X_train_lstm2 = []\n","  for i in range(len(X_train_lstm)-4):\n","    j = i + 2\n","    clip = np.array([X_train_lstm[j-2], X_train_lstm[j-1], X_train_lstm[j], X_train_lstm[j+1], X_train_lstm[j+2]])\n","    X_train_lstm2.append(clip)\n","\n","  X_test_lstm2 = []\n","  for i in range(len(X_test_lstm)-4):\n","    j = i + 2\n","    clip = np.array([X_test_lstm[j-2], X_test_lstm[j-1], X_test_lstm[j], X_test_lstm[j+1], X_test_lstm[j+2]])\n","    X_test_lstm2.append(clip)\n","\n","  X_train_lstm3=np.array(X_train_lstm2)\n","  X_test_lstm3=np.array(X_test_lstm2)\n","\n","\n","  #train the lstm component with the new feature vectores\n","  history2 = lstm.fit(X_train_lstm3, y_train,\n","                      batch_size=100,\n","                      epochs=5, verbose=0) # \n","                      \n","  test_scores = lstm.evaluate(X_test_lstm3, y_test, verbose=0)\n","  print('Test accuracy:', test_scores[1])  \n","\n","  y_prob = lstm.predict(X_test_lstm3)\n","\n","  y_pred = y_prob.argmax(axis=-1)\n","\n","  elapsed = dt.now() - begin_time_loop\n","  print('Fold {} took {}'.format(str(k), str(elapsed)))\n","  \n","  fold_result = {'fold': k, 'time': elapsed,'y_test': y_test, 'y_pred': y_pred, 'y_prob': y_prob,\n","               'history_cnn': history1.history, 'history_lstm': history2.history,  'accuracy': test_scores[1] }\n","    \n","      \n","  cv_results.append(fold_result)\n","\n","\n"],"execution_count":null,"outputs":[{"output_type":"error","ename":"NameError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-2-53027274010c>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 4\u001b[0;31m \u001b[0mskf\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mStratifiedKFold\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mn_splits\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m20\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      5\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      6\u001b[0m \u001b[0mcv_results\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'StratifiedKFold' is not defined"]}]},{"cell_type":"code","metadata":{"id":"Jt59ewE1UplW"},"source":["a_file = open('/content/gdrive/My Drive/Tesis (1 y 2)/cnnlstm.pkl', \"wb\")\n","pickle.dump(cv_results, a_file)\n","a_file.close()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"ane7CZUjEGeL"},"source":["\n","y_pred=[]\n","y_test=[]\n","for i in cv_results:\n","  y_pred.extend(i['y_pred'])\n","  y_test.extend(i['y_test'])\n","\n","\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"T-tmHj9_EO2i"},"source":["print(classification_report(y_test1,y_pred1, digits=4) )\n","\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"C3zGnJwZU8WQ"},"source":["C = confusion_matrix( y_test ,y_pred)\n","cn = C / C.astype(np.float).sum(axis=1)\n","cn = np.round(cn, 2)\n","\n","df_cm = pd.DataFrame(\n","    cn, index=['0-W','1-N1','2-N2','3-N3','4-REM'], columns=['0-W','1-N1','2-N2','3-N3','4-REM'])\n","fig = plt.figure(figsize=(8,7))\n","try:\n","    heatmap = sns.heatmap(df_cm, annot=True, cmap = \"Blues\", annot_kws={\"size\": 14})\n","except ValueError:\n","    raise ValueError(\"Confusion matrix values must be integers.\")\n","heatmap.yaxis.set_ticklabels(heatmap.yaxis.get_ticklabels(), rotation=0, ha='right', fontsize=14)\n","heatmap.xaxis.set_ticklabels(heatmap.xaxis.get_ticklabels(), rotation=45, ha='right', fontsize=14)\n","plt.ylabel('Etiquetas correctas', fontsize = 14)\n","plt.xlabel('Etiquetas predichas',  fontsize=14)\n","\n","plt.savefig('/content/gdrive/My Drive/Tesis (1 y 2)/matrixcnnlstm.png',bbox_inches='tight')\n","\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"xUDDg6_iU9Su"},"source":["elapsed_t = []\n","for i in cv_results:\n","  elapsed_t.append(i['time'])\n","\n","elapsed_t = pd.Series(elapsed_t)\n","elapsed_t.mean()\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"AxcvnOgNy0Ij"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"xh7L3L0qy1pG"},"source":["import pickle\n","with open('/content/gdrive/My Drive/Tesis (1 y 2)/cnnlstm.pkl', 'rb') as f:\n","    data = pickle.load(f)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"slJN91any1pS"},"source":["# plot accuracy curves per training epoch \n","accuracies = []\n","accuracies.extend(data[3]['history_cnn']['accuracy'])\n","accuracies.extend(data[3]['history_lstm']['accuracy'])\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"uiKjylS7y1pY"},"source":["plt.plot(data[3]['history_lstm']['accuracy'])\n","plt.title('LSTM', fontsize =14)\n","plt.ylabel('Accuracy', fontsize=14)\n","plt.xlabel('Época' , fontsize=13)\n","plt.xticks(ticks = np.arange(0, 5, step=1),  labels =  np.arange(1, 6, step=1))\n","plt.savefig('/content/gdrive/My Drive/Tesis (1 y 2)/accuracylstm.png',bbox_inches='tight')\n","plt.show()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"2uoZP4Dxy1pd"},"source":["plt.plot(data[3]['history_cnn']['accuracy'])\n","plt.title('CNN', fontsize =14)\n","plt.ylabel('Accuracy', fontsize=14)\n","plt.xlabel('Época' , fontsize=13)\n","plt.xticks(ticks = np.arange(0, 19, step=1),  labels =  np.arange(1, 20, step=1))\n","plt.savefig('/content/gdrive/My Drive/Tesis (1 y 2)/accuracycnn.png',bbox_inches='tight')\n","plt.show()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"N34CrRD1y1ph"},"source":["fig = plt.figure(figsize=(30,5))\n","\n","sns.lineplot(np.arange(len(y)), data[3]['y_test'])"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"G2I-gjM_y1pp"},"source":["fig = plt.figure(figsize=(30,5))\n","\n","sns.lineplot(np.arange(len(y)), data[3]['y_pred'])"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"OIlNMnM1y1pu"},"source":["from matplotlib.pyplot import plot\n","y = pd.Series(data[3]['y_test'])\n","di = {0:'0', 1:'1', 2:'2', 3:'3', 4:'4'}\n","y.replace(di, inplace=True)\n","\n","\n","\n","fig = plt.figure(figsize=(30,5))\n","plt.yticks( ticks =  [0,1,2,3,4] , labels =  [3,2,1,4,0] )  # [0,2,3,4,1] \n","\n","\n","plot(y)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"dPUPdwf7y1py"},"source":["#data[3]['y_test']\n","#y_true = data[3]['y_test']\n","\n","from matplotlib.pyplot import plot\n","y = pd.Series(data[3]['y_pred'])\n","#di = {0:'0', 1:'1', 2:'2', 3:'3', 4:'4'}\n","#y.replace(di, inplace=True)\n","\n","\n","\n","fig = plt.figure(figsize=(30,5))\n","plt.yticks( ticks =  [0,1,2,3,4] , labels =  [3,2,1,4,0] )  # [0,2,3,4,1] \n","\n","\n","plot(y)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"lyl8ftGUy1p1"},"source":["accuracies = []\n","for i in data:\n","  accuracies.append(i['accuracy'])"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"lJC-i-Ety1p3"},"source":["import pandas as pd\n","accuracies = pd.Series(accuracies)\n","accuracies.plot.bar() \n","\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"wxJhnqV6y1p5"},"source":["elapsed_t = []\n","for i in cv_results:\n","  elapsed_t.append(i['time'])\n","\n","elapsed_t = pd.Series(elapsed_t)\n","elapsed_t.mean()\n"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"8jF-INWqy1p9"},"source":["# CNN + LSTM\n","\n","falta poner arqui\n"]},{"cell_type":"markdown","metadata":{"id":"oQ_7p0KkSrRz"},"source":["# IV. Hypnogram comparison"]},{"cell_type":"code","metadata":{"id":"g-g8AZhGSvkj","executionInfo":{"status":"ok","timestamp":1598929776167,"user_tz":300,"elapsed":144008,"user":{"displayName":"Carlos Fabbri Garcia","photoUrl":"","userId":"14351255903339752641"}},"outputId":"687ae515-e183-46ef-e245-886441a0c4cf","colab":{"base_uri":"https://localhost:8080/","height":102}},"source":["import random\n","import datetime\n","path = '/content/gdrive/My Drive/Tesis/Código/Data_nuevodp'\n","files = os.listdir(path)\n","filespath = [] #lista de archivos npz\n","for i in files:\n","  filespath.append(os.path.join(path,i))\n","\n","\n","def one_record_test_set(filespath,i):\n","\n","  files = filespath[:]\n","  test_record = files.pop(i)\n","  print('Using record {} as test set'.format(test_record))\n","\n","  X_test, y_test = _load_npz_list_files([test_record])\n","  X_train, y_train = _load_npz_list_files(files)\n","\n","  print(X_test.shape, y_test.shape, X_train.shape, y_train.shape)\n","\n","  return X_train, X_test, y_train, y_test, test_record\n","\n","cv_results = []\n","\n","for i in range(1):\n","  i =  -7 #random.randint(1,38)\n","  X_train, X_test, y_train, y_test, record = one_record_test_set(filespath, i) \n","\n","  begin_time_loop = datetime.datetime.now()\n","  print('Current time: {}'.format(str(begin_time_loop)))\n","\n","\n","  inputs = keras.Input(shape=(3000,1))\n","\n","  #CNN\n","  x = layers.Conv1D( filters=64, kernel_size=50, strides=6 , \n","                    #kernel_regularizer=l2(0.001), bias_regularizer=l2(0.001),\n","                    name = 'conv1')(inputs)\n","  x = layers.BatchNormalization()(x) #repasar explicacion de batch \n","  x = layers.ReLU()(x)\n","\n","  x = layers.MaxPool1D(pool_size=8, strides=8, name='max1')(x)\n","\n","  x = layers.Dropout(rate=0.5  , name ='dropout1' )(x)\n","\n","  x = layers.Conv1D(filters=128, kernel_size=8, strides=1, \n","                    #kernel_regularizer=l2(0.001), bias_regularizer=l2(0.001),\n","                    name = 'conv2', padding = 'same' )(x)\n","  x = layers.BatchNormalization()(x)\n","  x = layers.ReLU()(x)\n","\n","  x = layers.Conv1D(filters=128, kernel_size=8, strides=1, \n","                    #kernel_regularizer=l2(0.001), bias_regularizer=l2(0.001),\n","                    name = 'conv3', padding = 'same' )(x)\n","  x = layers.BatchNormalization()(x)\n","  x = layers.ReLU()(x)\n","\n","  x = layers.Conv1D(filters=128, kernel_size=8, strides=1, \n","                    #kernel_regularizer=l2(0.001), bias_regularizer=l2(0.001),\n","                    name = 'conv4', padding = 'same')(x)\n","  x = layers.BatchNormalization()(x)\n","  x = layers.ReLU()(x)\n","\n","  x = layers.MaxPool1D(pool_size=4, strides=4, name = 'max2')(x)\n","  x = layers.Flatten()(x)\n","\n","\n","  x2 = layers.Conv1D( filters=64, kernel_size=400, strides=50 , \n","                    #kernel_regularizer=l2(0.001), bias_regularizer=l2(0.001),\n","                    name = 'conv1_2')(inputs)\n","  x2 = layers.BatchNormalization()(x2)\n","  x2 = layers.ReLU()(x2)\n","\n","  x2 = layers.MaxPool1D(pool_size=4, strides=4, name='max1_2')(x2)\n","\n","  x2 = layers.Dropout(rate=0.5  , name ='dropout1_2' )(x2)\n","\n","  x2 = layers.Conv1D(filters=128, kernel_size=6, strides=1, \n","                    #kernel_regularizer=l2(0.001), bias_regularizer=l2(0.001),\n","                    name = 'conv2_2', padding='same' )(x2)\n","  x2 = layers.BatchNormalization()(x2)\n","  x2 = layers.ReLU()(x2)\n","\n","  x2 = layers.Conv1D(filters=128, kernel_size=6, strides=1, \n","                    #kernel_regularizer=l2(0.001), bias_regularizer=l2(0.001),\n","                    name = 'conv3_2', padding='same' )(x2)\n","  x2 = layers.BatchNormalization()(x2)\n","  x2 = layers.ReLU()(x2)\n","\n","  x2 = layers.Conv1D(filters=128, kernel_size=6, strides=1, \n","                    #kernel_regularizer=l2(0.001), bias_regularizer=l2(0.001),\n","                    name = 'conv4_2', padding='same' )(x2)\n","  x2 = layers.BatchNormalization()(x2)\n","  x2 = layers.ReLU()(x2)\n","\n","  x2 = layers.MaxPool1D(pool_size=2, strides=2, name = 'max2_2')(x2)\n","\n","  x2 = layers.Flatten()(x2)\n","\n","  concat = layers.Concatenate(name = 'concat')([x, x2])\n","\n","  outputs = layers.Dense(5, activation=tf.nn.softmax, name = 'soft') (concat)\n","\n","\n","  model = keras.Model(inputs=inputs, outputs=outputs, name='sleep')\n","\n","  model.compile(loss=keras.losses.SparseCategoricalCrossentropy(),\n","              optimizer=keras.optimizers.Adam(learning_rate=0.001),\n","              metrics=['accuracy'])\n","  \n","  history1 = model.fit(X_train, y_train,\n","                    batch_size=100,\n","                    epochs=19, verbose=0) # 24\n","\n","\n","  #get feature vectors\n","  layer_name = 'concat'\n","  intermediate_layer_model = keras.Model(inputs=model.input,\n","                                  outputs=model.get_layer(layer_name).output)\n","  intermediate_output_train = intermediate_layer_model.predict(X_train)\n","  intermediate_output_test = intermediate_layer_model.predict(X_test)\n","  X_train_lstm = intermediate_output_train\n","  X_test_lstm = intermediate_output_test\n","\n","  a = np.zeros((1, 2688))\n","\n","  X_train_lstm = np.insert(X_train_lstm, 0, a, axis=0)\n","  X_train_lstm = np.insert(X_train_lstm, 0, a, axis=0)\n","  X_train_lstm = np.insert(X_train_lstm, -1, a, axis=0)\n","  X_train_lstm = np.insert(X_train_lstm, -1, a, axis=0)\n","\n","  X_test_lstm = np.insert(X_test_lstm, 0, a, axis=0)\n","  X_test_lstm = np.insert(X_test_lstm, 0, a, axis=0)\n","  X_test_lstm = np.insert(X_test_lstm, -1, a, axis=0)\n","  X_test_lstm = np.insert(X_test_lstm, -1, a, axis=0)\n","\n","  X_train_lstm2 = []\n","  for i in range(len(X_train_lstm)-4):\n","    j = i + 2\n","    clip = np.array([X_train_lstm[j-2], X_train_lstm[j-1], X_train_lstm[j], X_train_lstm[j+1], X_train_lstm[j+2]])\n","    X_train_lstm2.append(clip)\n","\n","  X_test_lstm2 = []\n","  for i in range(len(X_test_lstm)-4):\n","    j = i + 2\n","    clip = np.array([X_test_lstm[j-2], X_test_lstm[j-1], X_test_lstm[j], X_test_lstm[j+1], X_test_lstm[j+2]])\n","    X_test_lstm2.append(clip)\n","\n","  X_train_lstm3=np.array(X_train_lstm2)\n","  X_test_lstm3=np.array(X_test_lstm2)\n","\n","  #LSTM\n","  inputs = keras.Input(shape=(5,2688))\n","\n","  x = layers.Dropout(rate=0.5  , name ='lstm_dropout1' )(inputs)\n","\n","  x1 = Bidirectional(layers.LSTM(512, return_sequences=True)) (x)\n","  x1 = layers.Dropout(rate=0.5  , name ='lstm_dropout2' )(x1)\n","\n","  x1 = Bidirectional(layers.LSTM(512)) (x1)\n","  x1 = layers.Dropout(rate=0.5  , name ='lstm_dropout3' )(x1)\n","\n","  x2 = layers.Dense(1024)(x)\n","  x2 = layers.BatchNormalization()(x2)\n","  x2 = layers.ReLU(name = 'lstm_residual1')(x2)\n","\n","  addition = layers.Add(name = 'lstm_concat1')([x1, x2])\n","\n","\n","  x3 = layers.BatchNormalization()(addition)\n","  x3 = layers.ReLU(name = 'lstm_residual2')(x3)\n","\n","  x3 = layers.Dropout(rate=0.5  , name ='lstm_dropout4' )(addition)\n","\n","  x3 = layers.Flatten()(x3)\n","\n","  outputs = layers.Dense(5, activation=tf.nn.softmax, name = 'lstm_soft') (x3)\n","\n","  model = keras.Model(inputs=inputs, outputs=outputs, name='lstmsleep')\n","\n","  model.compile(loss=keras.losses.SparseCategoricalCrossentropy(),\n","              optimizer=keras.optimizers.Adam(learning_rate=0.001),\n","              metrics=['accuracy'])\n","\n","  history2 = model.fit(X_train_lstm3, y_train,\n","                      batch_size=100,\n","                      epochs=5, verbose=0) # \n","                      \n","  test_scores = model.evaluate(X_test_lstm3, y_test, verbose=0)\n","  print('Test accuracy:', test_scores[1])  \n","\n","  y_prob = model.predict(X_test_lstm3)\n","\n","  y_pred = y_prob.argmax(axis=-1)\n","\n","  elapsed = datetime.datetime.now() - begin_time_loop\n","  print('Fold {} took {}'.format(str(i), str(elapsed)))\n","  \n","  fold_result = {'record': record, 'time': elapsed,'y_test': y_test, 'y_pred': y_pred, 'accuracy': test_scores[1] }\n","    \n","      \n","  cv_results.append(fold_result)\n"," "],"execution_count":null,"outputs":[{"output_type":"stream","text":["Using record /content/gdrive/My Drive/Tesis/Código/Data_nuevodp/SC4142E0.npz as test set\n","(952, 3000, 1) (952,) (41356, 3000, 1) (41356,)\n","Current time: 2020-09-01 03:07:12.091168\n","Test accuracy: 0.9065126180648804\n","Fold 951 took 0:02:21.303376\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"1I93_j7zT183"},"source":["y_pred = cv_results[0]['y_pred']\n","y_test = cv_results[0]['y_test']"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"BKZ3FrMAfWaa","executionInfo":{"status":"ok","timestamp":1588827354267,"user_tz":300,"elapsed":1026,"user":{"displayName":"Carlos Fabbri Garcia","photoUrl":"","userId":"14351255903339752641"}},"outputId":"23db316f-a465-48db-fc2e-88ed9693990b","colab":{"base_uri":"https://localhost:8080/","height":68}},"source":["axs"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([<matplotlib.axes._subplots.AxesSubplot object at 0x7f0dc80bff28>,\n","       <matplotlib.axes._subplots.AxesSubplot object at 0x7f0d3e501470>],\n","      dtype=object)"]},"metadata":{"tags":[]},"execution_count":136}]},{"cell_type":"code","metadata":{"id":"c612x_qlaOPB","executionInfo":{"status":"ok","timestamp":1598929865720,"user_tz":300,"elapsed":1391,"user":{"displayName":"Carlos Fabbri Garcia","photoUrl":"","userId":"14351255903339752641"}},"outputId":"f601a866-7999-4258-f417-d110f301abe7","colab":{"base_uri":"https://localhost:8080/","height":463}},"source":["from seaborn import lineplot\n","\n","fig, axs = plt.subplots(2,1, figsize=(20,7))\n","\n","axs[0].set_title('Real hypnogram', size = 14)\n","axs[0].set_ylabel('Sleep stage', fontsize=14)\n","axs[0].set_yticks([0,1,2,3,4])\n","\n","\n","axs[1].set_title('Predicted Hypnogram', size = 14)\n","axs[1].set_ylabel('Sleep stage', fontsize=14)\n","axs[1].set_yticks([0,1,2,3,4])\n","\n","axs[1].set_xlabel('Time (in 30 second epochs)', fontsize=14)\n","\n","sns.lineplot(np.arange(len(y_test)), y_test, ax = axs[0])\n","sns.lineplot(np.arange(len(y_pred)), y_pred, ax = axs[1])\n","\n","\n","fig.savefig('/content/gdrive/My Drive/Tesis/hipnograma_ingles.png',bbox_inches='tight')\n"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 1440x504 with 2 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"Ka9KgBNRdOuX"},"source":[""],"execution_count":null,"outputs":[]}]}